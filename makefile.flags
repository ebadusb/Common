# @(#) $Header: M:/BCT_Development/vxWorks/Common/rcs/makefile.flags 1.3 2002/04/12 17:02:39 sb07663 Exp sb07663 $
#
# Makefile.flags - common compile-time options for vxWorks
#
# $Log: makefile.flags $
#

#
# Default to a DEBUG build.  To get a production build (optimized,
# no debug symbols) use BUILD_TYPE=PRODUCTION on the make command
# line.
#
ifndef BUILD_TYPE
  BUILD_TYPE=DEBUG
endif

#
# Set commands for assembler, C pre-processor (CPP), C compiler, C++
# compiler and archive tool based on selected CPU type.  The architecture
# specific flags required for each command are also set here.
#
ifeq ($(CPU),I80486)
AS = cc386 -c
CPP = cc386 -E
CC = cc386 -c
CXX = cc386 -c
AR = ar386

ARCH_FLAGS = -DCPU=I80486 -m486 -DVXWORKS
AS_ARCH_FLAGS  = $(ARCH_FLAGS)
CPP_ARCH_FLAGS = $(ARCH_FLAGS)
CC_ARCH_FLAGS  = $(ARCH_FLAGS)
CXX_ARCH_FLAGS = $(ARCH_FLAGS) -Wstrict-prototypes
endif

ifeq ($(CPU),SIMNT)
AS  = ccsimpc -c
CPP = ccsimpc -E
CC  = ccsimpc -c
CXX = ccsimpc -c
AR = arsimpc

ARCH_FLAGS = -DCPU=SIMNT -U__WINNT -UWIN32 -U__WINNT__ -UWINNT -U__MINGW32__ -U_WIN32 -U__WIN32 -U__WIN32__ -U__WIN32 -mpentium -DVXWORKS
AS_ARCH_FLAGS  = $(ARCH_FLAGS)
CPP_ARCH_FLAGS = $(ARCH_FLAGS)
CC_ARCH_FLAGS  = $(ARCH_FLAGS)
CXX_ARCH_FLAGS = $(ARCH_FLAGS) -Wstrict-prototypes
endif

#
# This section sets debug and optimization options based on
# the build type.
#
ifeq ($(BUILD_TYPE), PRODUCTION)
DBGFLAGS = -DPRODUCTION_BUILD
OPTFLAGS = -O2 -Wuninitialized
else
DBGFLAGS = -g -DDEBUG_BUILD
OPTFLAGS =
endif

#
# These flags can be set before including this common file
# and allow individual makefiles to add additional command
# line flags for the assembler, pre-processor, c-compiler,
# and c++ compiler, and for include file directories.  If used,
# these must be defined in the individual makefile before
# including this common makefile
#
ADDN_ASFLAGS ?=
ADDN_CCFLAGS ?=
ADDN_CPPFLAGS ?=
ADDN_CXXFLAGS ?=
ADDN_INCDIR ?=

#
# The warning list includes all of -Wall except -Wunused and -Wunitialized
# (unitialized is enabled above for the production build, since it requires
# optimization to be enabled.  unused causes false warnings on certain class
# declarations in this version of the GNU compiler and so must be left out.
#
WARNFLAGS = -Werror -Wmissing-prototypes \
            -Wmissing-declarations -Wchar-subscripts -Wcomment -Wformat \
	    -Wimplicit -Wparentheses -Wreturn-type -Wswitch -Wtrigraphs


################################################################################
#
# Makefile.lib - common makefile for libraries
#
################################################################################

#
# This file should be included as the last line in makefile.vx
# The following variables need to be defined
#
#   LIB_C_FILES - list of C files to be compiled and placed in the library
#   LIB_CXX_FILES - list of C++ files to be compiled and placed in the library
#   LIB_S_FILES - list of assembly files to be assembled and placed in the library
#   LIB_ARCHIVE - archive file to be created
#   MAINDIR - path to the application main directory
#   CPU - CPU type for build
#   BUILD_TYPE - build type for build
#
# All file names and paths must be specified relative to the directory
# containing the main makefile for the library (makefile.vx).  A single
# makefile.vx can define only one library (this could be extended if
# necessary in the future - see makefile.process_app, makefile.build_apps)
#    
LIB_OBJ := $(addprefix $(CPU)/, $(notdir $(LIB_C_FILES:.c=.o))) \
           $(addprefix $(CPU)/, $(notdir $(LIB_CXX_FILES:.cpp=.o))) \
           $(addprefix $(CPU)/, $(notdir $(LIB_S_FILES:.s=.o)))

DEPEND_CXX_FILES := $(addprefix .dfile/, $(notdir $(LIB_CXX_FILES:.cpp=.d)))
DEPEND_C_FILES   := $(addprefix .dfile/, $(notdir $(LIB_C_FILES:.c=.d)))
DEPEND_S_FILES   := $(addprefix .dfile/, $(notdir $(LIB_S_FILES:.s=.d)))
LIB_DEPEND       := $(DEPEND_CXX_FILES) $(DEPEND_C_FILES) $(DEPEND_S_FILES)
LIB_ARCHIVE      := $(subst \,/,$(ARCHIVE_DIR)/$(ARCHIVE_NAME))
# This alias prevents false circular dependency for 'lib:' when ARCHIVE_DIR=lib
LIB_DIR_ALIAS    := $(subst \,/,$(ARCHIVE_DIR))/.

.PHONY: lib
ifeq ($(BUILD_TYPE),CLEAN)
lib : ;
else
lib : $(LIB_ARCHIVE)
endif

$(LIB_ARCHIVE) : $(LIB_DEPEND) $(LIB_OBJ) | $(LIB_DIR_ALIAS)
  ifeq ($(TERSE),true)
	@echo x Creating: $(@F)
	@if not exist $(@D) echo z FYI_FIXME_FOR_PMAKE: mkdir $(@D) from $(BASEDIR) 
  endif
	@if not exist $(@D) mkdir $(subst /,\,$(@D))
	@rm -f $@
  ifneq ($(ARCHIVE_TYPE),OBJFILE)
	$(Q)$(AR) -rcs $@ $(LIB_OBJ)
  else
	$(Q)$(LD) $(LDFLAGS) $(LIB_OBJ) -o $@
  endif

$(LIB_DEPEND) : | .dfile
$(LIB_OBJ)    : | $(CPU)

$(LIB_DIR_ALIAS) :
  ifeq ($(TERSE),true)
	@echo z Making directory: $@ from $(BASEDIR)
  endif
	$(Q)mkdir $(subst /,\,$@)

ifeq ($(BUILD_TYPE),CLEAN)
.PHONY: clean
clean::
  ifeq ($(TERSE),true)
	@echo x Cleaning: $(BASEDIR)
  endif
	$(Q)rm -f $(subst \,/, $(LIB_ARCHIVE))
	$(Q)rm -f $(subst \,/, $(COMMON_CLEAN_FILELIST))
	$(Q)rm -f $(subst \,/, $(ADDN_CLEAN))
endif

ifneq ($(BUILD_TYPE),CLEAN)
 ifndef FORCE_REBUILD
  ifneq ($(strip $(LIB_CXX_FILES)),)
   -include $(DEPEND_CXX_FILES)
  endif

  ifneq ($(strip $(LIB_C_FILES)),)
   -include $(DEPEND_C_FILES)
  endif

  ifneq ($(strip $(LIB_S_FILES)),)
   -include $(DEPEND_S_FILES)
  endif
 else
  include $(MAINDIR)/makefile.rules
 endif
endif

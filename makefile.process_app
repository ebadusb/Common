################################################################################
#
# Makefile.process_app - common makefile for a vxWork application
#
# This file is pre-processor for makefile.build_apps. To build multiple
# applications, include makefile.process_app after each set of APP_NAME
# variables. Then include makefile.build_apps to finalize things. 
#
################################################################################

#
# The convention for application makefiles is that application related
# variables supplied by the main makefile use lower case extensions (e.g.
# $(APP_NAME)_c_files.  Computed variables from the makefile templates
# use upper case extensions.
#
# The main makefile needs to supply the following variables:
#  APP_NAME - root application name, without directory information or the .out extension
#  $(APP_NAME)_c_files - a list of c source files for the application
#  $(APP_NAME)_cxx_files - a list of cpp source files for the application
#  $(APP_NAME)_dir - the destination directory for the .out file
#  $(APP_NAME)_map - the name for the map file to be generated (blank if none)
#  $(APP_NAME)_libs - a list of .lib files to be linked with the application
#  $(APP_NAME)_lib_list - the name of a text file containing a list of .o and .lib files
#

$(APP_NAME)_OBJS := \
    $(addprefix $(CPU)/, $(notdir $($(APP_NAME)_c_files:.c=.o))) \
    $(addprefix $(CPU)/, $(notdir $($(APP_NAME)_s_files:.s=.o))) \
    $(addprefix $(CPU)/, $(notdir $($(APP_NAME)_cxx_files:.cpp=.o)))

$(APP_NAME)_DEPENDS := \
    $(addprefix .dfile/, $(notdir $($(APP_NAME)_c_files:.c=.d))) \
    $(addprefix .dfile/, $(notdir $($(APP_NAME)_cxx_files:.cpp=.d)))

$(APP_NAME)_dir      := $(subst \,/,$($(APP_NAME)_dir))
$(APP_NAME)_libs     := $(subst \,/,$($(APP_NAME)_libs))
$(APP_NAME)_lib_list := $(subst \,/,$($(APP_NAME)_lib_list))

APP_LIST := $(APP_LIST) $($(APP_NAME)_dir)/$(APP_NAME).out

# Use $(sort ...) to remove any duplicates
APP_DIRS := $(sort $(APP_DIRS) $(subst \,/,$($(APP_NAME)_dir)))

ifneq ($(strip $($(APP_NAME)_map)),)
MAP_LIST := $(MAP_LIST) $($(APP_NAME)_dir)/$($(APP_NAME)_map)
endif

ifneq ($(strip $($(APP_NAME)_lib_list)),)
$(APP_NAME)_LIB_LIST_OPT := @$($(APP_NAME)_lib_list)
endif

#
# Ignore APP_MAP for now - mapfile generation causes an
# abnormal termination of ld386 if the -r option is used.
# See SPR 68959 on the windriver web site.
#
#ifdef APP_MAP
#$(APP_NAME)_MAP_OPT := -Map $($(APP_NAME)_dir)/$($(APP_NAME)_map)
#else
#$(APP_NAME)_MAP_OPT :=
#endif
#
$(APP_NAME)_MAP_OPT :=

$($(APP_NAME)_dir)/$(APP_NAME).out : $($(APP_NAME)_DEPENDS) $($(APP_NAME)_OBJS)
$($(APP_NAME)_dir)/$(APP_NAME).out : $($(APP_NAME)_libs)
$($(APP_NAME)_dir)/$(APP_NAME).out : $($(APP_NAME)_lib_list)

$($(APP_NAME)_DEPENDS) : | .dfile
$($(APP_NAME)_OBJS)    : | $(CPU)

ifndef FORCE_REBUILD
 ifneq ($(strip $($(APP_NAME)_DEPENDS)),)
  -include $(addprefix .dfile/, $(notdir $($(APP_NAME)_DEPENDS)))
 endif
else
 include $(MAINDIR)/makefile.rules
endif


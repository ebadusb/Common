# @(#) $Header: K:/BCT_Development/vxWorks/Common/rcs/makefile.vxc 1.3 2002/06/18 19:29:18 jl11312 Exp jl11312 $
#
# Makefile.vxc - common makefile for common/vxWorks
#
# $Log: makefile.vxc $
# Revision 1.1  2002/04/18 14:27:46  jl11312
# Initial revision
#

#
# Get compile commands and flags which must be shared between the common
# project and Trima.
#
include $(MAINDIR)/makefile.flags

#
# This set of commands gets the BUILD_TYPE and CPU settings used
# for the last build.  This is used to force a rebuild on a change
# to these settings.
#
SETUP_OPT_DIR := $(shell if not exist .opt mkdir .opt)
SETUP_BUILD_TYPE_FILE := $(shell if not exist .opt\build_type echo NO DEFAULT > .opt\build_type)
SETUP_CPU_FILE := $(shell if not exist .opt\cpu echo NO DEFAULT > .opt\cpu)
OLD_BUILD_TYPE := $(strip $(shell cat .opt/build_type))
OLD_CPU := $(strip $(shell cat .opt/cpu))

#
# If build options have changed, we need to force a rebuild.  We do it
# by removing all of the dependency files.  The rule for rebuild each
# dependency file in turn deletes the associated object file, so that
# those will be rebuilt as well.  It is important that any target which
# depends on an object file also has the .dfile file listed as a dependency
# (before the .o file) to insure that this works correctly.
#
ifneq ($(BUILD_TYPE)$(CPU), $(OLD_BUILD_TYPE)$(OLD_CPU))
  FORCE_REBUILD := $(shell rm -f -r .dfile $(CPU) $(OLD_CPU))
  DUMMY_VAR := $(shell echo $(BUILD_TYPE) > .opt\build_type)
  DUMMY_VAR := $(shell echo $(CPU) > .opt\cpu)
  DUMMY_VAR := $(shell echo $(FORCE_REBUILD) > .opt\force)
endif

#
# Build the list of include directories
#
ifndef INCDIR
INCDIR := -I$(COMDIR)/include -I. -I$(WIND_BASE)/target/h $(ADDN_INCDIR)
endif

#
# These assignments build the command line options needed for each command
#
ASFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(AS_ARCH_FLAGS) $(ADDN_ASFLAGS)
CPPFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CPP_ARCH_FLAGS) $(ADDN_CPPFLAGS)
CCFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CC_ARCH_FLAGS) $(ADDN_CCFLAGS)
CXXFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CXX_ARCH_FLAGS) $(ADDN_CXXFLAGS)
LDFLAGS = $(LD_ARCH_FLAGS) $(ADDN_LDFLAGS)
LDLIBS = $(LD_ARCH_LIBS) $(ADDN_LDLIBS)

#
# If we are not forcing a complete rebuild, we can simply include all of
# the pattern rules here.  Otherwise, they are included later (after the clean
# target is defined).  If we are rebuild, we define FORCE_REBUILD_DEF.  This
# is passed to recursive invocations of make to insure they also perform
# the rebuild.
#
ifndef FORCE_REBUILD
  include $(MAINDIR)/makefile.rules
else
  FORCE_REBUILD_DEF := FORCE_REBUILD=1
endif

FORCE_REBUILD_DEF ?=

#
# This target is used to save the current build type and cpu
# settings.  It also notifies the user if a complete rebuild is
# being forces due to a change in those settings from the last
# build.
#
.PHONY: check_opt_change
check_opt_change:
ifdef COMDIR_STATUS
	@echo $(COMDIR_STATUS): $(COMDIR)
endif
ifdef FORCE_REBUILD
	@echo Build settings changed - forcing rebuild of all targets
	@echo Current build: $(BUILD_TYPE), $(CPU); previous build: $(OLD_BUILD_TYPE), $(OLD_CPU)
endif 


# @(#) $Header: K:/BCT_Development/vxWorks/Common/rcs/makefile.vxc 1.5 2004/12/02 22:05:09Z jl11312 Exp jl11312 $
#
# Makefile.vxc - common makefile for common/vxWorks
#
# $Log: makefile.vxc $
# Revision 1.4  2002/08/15 20:49:19Z  jl11312
# - added support for addition option checking
# - added a default rule to improve error reporting
# Revision 1.3  2002/06/18 19:29:18  jl11312
# - corrected comments
# Revision 1.2  2002/05/16 17:39:25  jl11312
# - allow for overrides of INCDIR variable
# Revision 1.1  2002/04/18 14:27:46  jl11312
# Initial revision
#

#
# Get compile commands and flags which must be shared between the common
# project and the application build.
#
include $(MAINDIR)/makefile.flags

#
# This set of commands gets the BUILD_TYPE and CPU settings used
# for the last build.  This is used to force a rebuild on a change
# to these settings.
#
# The variables OLD_ADDN_OPT_TEST and ADDN_OPT_TEST are provided to allow
# for application specific build settings which aren't used within the
# common makefile templates.
#
SETUP_OPT_DIR := $(shell if not exist .opt mkdir .opt)
SETUP_BUILD_TYPE_FILE := $(shell if not exist .opt\build_type echo "" > .opt\build_type)
SETUP_CPU_FILE := $(shell if not exist .opt\cpu echo "" > .opt\cpu)
SETUP_ADDN_FILE := $(shell if not exist .opt\addn echo "" > .opt\addn)
OLD_BUILD_TYPE := $(strip $(shell cat .opt/build_type))
OLD_CPU := $(strip $(shell cat .opt/cpu))
OLD_ADDN_OPT_TEST:= $(strip $(shell cat .opt/addn))

#
# If build options have changed, we need to force a rebuild.  We do it
# by removing all of the dependency files.  The rule for rebuild each
# dependency file in turn deletes the associated object file, so that
# those will be rebuilt as well.  It is important that any target which
# depends on an object file also has the .dfile file listed as a dependency
# (before the .o file) to insure that this works correctly.
#
ADDN_OPT_TEST ?=
ifneq ("$(CPU)""$(ADDN_OPT_TEST)", $(OLD_CPU)$(OLD_ADDN_OPT_TEST))
  DUMMY_VAR := $(shell rm -f $(COMMON_CLEAN_FILELIST))
  DUMMY_VAR := $(shell echo "$(BUILD_TYPE)" > .opt\build_type)
  DUMMY_VAR := $(shell echo "$(CPU)" > .opt\cpu)
  DUMMY_VAR := $(shell echo "$(ADDN_OPT_TEST)" > .opt\addn)
  FORCE_REBUILD := 1
endif

#
# Build the list of include directories
#
ifndef INCDIR
INCDIR := -I$(COMDIR)/include -I. -I$(WIND_BASE)/target/h $(ADDN_INCDIR)
endif

#
# These assignments build the command line options needed for each command
#
ASFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(AS_ARCH_FLAGS) $(ADDN_ASFLAGS)
CPPFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CPP_ARCH_FLAGS) $(ADDN_CPPFLAGS)
CCFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CC_ARCH_FLAGS) $(ADDN_CCFLAGS)
CXXFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CXX_ARCH_FLAGS) $(ADDN_CXXFLAGS)
LDFLAGS = $(LD_ARCH_FLAGS) $(ADDN_LDFLAGS)
LDLIBS = $(LD_ARCH_LIBS) $(ADDN_LDLIBS)

#
# If we are not forcing a complete rebuild, we can simply include all of
# the pattern rules here.  Otherwise, they are included later (after the clean
# target is defined).  If we are rebuild, we define FORCE_REBUILD_DEF.  This
# is passed to recursive invocations of make to insure they also perform
# the rebuild.
#
ifndef FORCE_REBUILD
  include $(MAINDIR)/makefile.rules
else
  FORCE_REBUILD_DEF := FORCE_REBUILD=1
endif

FORCE_REBUILD_DEF ?=

#
# This target is used to save the current build type and cpu
# settings.  It also notifies the user if a complete rebuild is
# being forces due to a change in those settings from the last
# build.
#
.PHONY: check_opt_change
check_opt_change:
ifdef OPT_ERROR
	@echo $(OPT_ERROR)
	@exit 1 
else
 ifdef COMDIR_STATUS
	@echo $(COMDIR_STATUS): $(COMDIR)
 endif
 ifdef FORCE_REBUILD
	@echo Build settings changed - forcing rebuild of all targets
   ifeq ($(ADDN_OPT_TEST),)
	@echo Current build: "$(BUILD_TYPE)" "$(CPU)"
	@echo Previous build: $(OLD_BUILD_TYPE) $(OLD_CPU)
   else 
	@echo Current build: "$(BUILD_TYPE)" "$(CPU)" "$(ADDN_OPT_TEST)"
	@echo Previous build: $(OLD_BUILD_TYPE) $(OLD_CPU) $(OLD_ADDN_OPT_TEST)
   endif 
 endif
endif

.DEFAULT:
	@echo Error making target $@
	@echo This may be due to a missing source file or to a mis-typed file name
	@echo in a dependency list.
	@exit 1

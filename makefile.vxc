################################################################################
#
# Makefile.vxc - common makefile for common/vxWorks
#
################################################################################

#
# For makefile debugging:
# - TERSE=true can be used to abbreviate echoed output (good for parallel builds);
#   It defines $(Q) as an alias for make's recipe suppression prefix, '@';
#   otherwise, Q is left undefined, such that it has no effect.
# - BASEDIR is like `basename $PWD`, the tail portion of working directory.
#
ifeq ($(TERSE),true)
 Q=@
endif
ifndef BASEDIR
 BASEDIR := $(notdir $(shell cmd /c cd))
endif

#
# After execution of these assignments, RMSGDIR_STATUS will hold
# a status message indicating the reserved messages directory location
# (either that the default was used or that a local override
# was used).  RMSGDIR will hold the path of the reserved messages directory
# to be used.
#
ifndef RMSGDIR
	RMSGDIR_STATUS := $(shell cmd /c 'cd $(MAINDIR) && $(MAKE) -f makefile.frm find_rmsg')
	RMSGDIR := $(strip $(shell cat $(MAINDIR)/.rmsg/latest_rmsg_build_dir.mk))
	CHECK_RMSGDIR_STATUS := $(shell cmd /c 'cd $(MAINDIR) && $(MAKE) -f makefile.frm RMSGDIR=$(RMSGDIR) verify_rmsg')
else
	CHECK_RMSGDIR_STATUS := OK
endif

#
# Get compile commands and flags which must be shared between the common
# project and the application build.
#
include $(MAINDIR)/makefile.flags

#
# This set of commands gets the BUILD_TYPE and CPU settings used
# for the last build.  This is used to force a rebuild on a change
# to these settings.
#
# The variables OLD_ADDN_OPT_TEST and ADDN_OPT_TEST are provided to allow
# for application specific build settings which aren't used within the
# common makefile templates.
#
SETUP_OPT_DIR := $(shell cmd /c 'if not exist .opt mkdir .opt')
SETUP_BUILD_TYPE_FILE := $(shell cmd /c 'if not exist .opt\build_type echo "" > .opt\build_type')
SETUP_CPU_FILE := $(shell cmd /c 'if not exist .opt\cpu echo "" > .opt\cpu')
SETUP_ADDN_FILE := $(shell cmd /c 'if not exist .opt\addn echo "" > .opt\addn')
OLD_BUILD_TYPE := $(strip $(shell cat .opt/build_type))
OLD_CPU := $(strip $(shell cat .opt/cpu))
OLD_ADDN_OPT_TEST:= $(strip $(shell cat .opt/addn))

#
# If build options have changed, we need to force a rebuild.  We do it
# by removing all of the dependency and object files per the definition 
# of COMMON_CLEAN_FILELIST. It is important that any target which
# depends on an object file also has the .dfile file listed as a dependency
# (before the .o file) to insure that this works correctly.
#
ADDN_OPT_TEST ?=
ifneq ("$(CPU)""$(ADDN_OPT_TEST)", $(OLD_CPU)$(OLD_ADDN_OPT_TEST))
  DUMMY_VAR := $(shell rm -f $(COMMON_CLEAN_FILELIST))
  DUMMY_VAR := $(shell cmd /c 'echo "$(BUILD_TYPE)" > .opt\build_type')
  DUMMY_VAR := $(shell cmd /c 'echo "$(CPU)" > .opt\cpu')
  DUMMY_VAR := $(shell cmd /c 'echo "$(ADDN_OPT_TEST)" > .opt\addn')
  FORCE_REBUILD := 1
endif

#
# Build the list of include directories
#
ifndef INCDIR
INCDIR := -I$(COMDIR)/include -I. -I$(WIND_BASE)/target/h $(ADDN_INCDIR) -I$(COMDIR)
endif

#
# These assignments build the command line options needed for each command
#
ASFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(AS_ARCH_FLAGS) $(ADDN_ASFLAGS)
CPPFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CPP_ARCH_FLAGS) $(ADDN_CPPFLAGS)
CCFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CC_ARCH_FLAGS) $(ADDN_CCFLAGS)
CXXFLAGS = $(INCDIR) $(DBGFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(CXX_ARCH_FLAGS) $(ADDN_CXXFLAGS)
LDFLAGS = $(LD_ARCH_FLAGS) $(ADDN_LDFLAGS)
LDLIBS = $(LD_ARCH_LIBS) $(ADDN_LDLIBS)

#
# If we are not forcing a complete rebuild, we can simply include all of
# the pattern rules here.  Otherwise, they are included later (after the clean
# target is defined).  If we are rebuild, we define FORCE_REBUILD_DEF.  This
# is passed to recursive invocations of make to insure they also perform
# the rebuild.
#
ifndef FORCE_REBUILD
  include $(MAINDIR)/makefile.rules
else
  FORCE_REBUILD_DEF := FORCE_REBUILD=1
endif

FORCE_REBUILD_DEF ?=

#
# This target is used to save the current build type and cpu
# settings.  It also notifies the user if a complete rebuild is
# being forces due to a change in those settings from the last
# build.
#
.PHONY: check_opt_change
check_opt_change:
ifdef OPT_ERROR
	@echo $(OPT_ERROR)
	@exit 1
else
  ifneq ($(strip $(CHECK_RMSGDIR_STATUS)),OK)
	@echo Invalid reserved messages directory: $(RMSGDIR)
	@echo $(CHECK_RMSGDIR_STATUS)
	@echo Check that the reserved messages directory has been built properly. 
	@echo Note that the file latest_rmsg_build_dir.mk can be used to override
	@echo the location of the reserved messages directory.
	@exit 1
  else
    ifdef COMDIR_STATUS
	@echo $(COMDIR_STATUS): $(COMDIR)
    endif
    ifdef FORCE_REBUILD
	@echo Build settings changed - forcing rebuild of all targets in: $(BASEDIR)
      ifeq ($(ADDN_OPT_TEST),)
	@echo Current build: "$(BUILD_TYPE)" "$(CPU)"
	@echo Previous build: $(OLD_BUILD_TYPE) $(OLD_CPU)
      else
	@echo Current build: "$(BUILD_TYPE)" "$(CPU)" "$(ADDN_OPT_TEST)"
	@echo Previous build: $(OLD_BUILD_TYPE) $(OLD_CPU) $(OLD_ADDN_OPT_TEST)
      endif
    endif
  endif
endif

.DEFAULT:
	@echo Error making target $@
	@echo This may be due to a missing source file or to a mis-typed file name
	@echo in a dependency list.
	@exit 1
